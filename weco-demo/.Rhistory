" standard deviations of center line (either side). Default values k=15 and l=1.",
sep="");
pars <- c(k=15, l=1);
list(txt, pars);
}
describe.r8 <- function(k="k", l="l") {
txt  <- paste(k, " points in a row >", l,
" standard deviations from center line (either side). Default values k=8 and l=1.",
sep="");
pars <- c(k=8, l=1);
list(txt, pars);
}
##------------------------------------
##  running length
##------------------------------------
#' Get running lengths
#'
#' @param weco.rst A class \code{weco} vector returned from
#'     \code{\link{weco.rule}} or \code{\link{weco.combine}}
#'
#' @examples
#'
#' x        <- rnorm(1000);
#' rst.comb <- weco.combine(x, lst.rules=list(list(1), list(2, k=9)));
#' weco.rl(rst.comb);
#'
#'
#' @return A vector of running lengths detected from the observed continuously
#'     observed data
#'
#' @seealso \code{\link{weco.rule}}, \code{\link{weco.combine}}
#'
#' @export
#'
weco.rl <- function(weco.rst) {
stopifnot("weco" == class(weco.rst));
violations <- weco.rst$weco;
narl       <- length(which(1 == violations));
if (0 == narl)
return(NULL);
rst.c <- .C("getrl",
as.integer(violations),
as.integer(length(violations)),
as.integer(rep(0, narl)));
rst <- rst.c[[3]];
rst
}
##------------------------------------------------------------------------
##   SHINY
##-------------------------------------------------------------------------
#' Run Web-Based \code{weco} application
#'
#' Call Shiny to run \code{weco} as a web-based application. A web browser will
#' be brought up.
#'
#' @examples
#'
#' \dontrun{
#' run.weco()}
#'
#'
#' @export
#'
run.weco <- function() {
if (!requireNamespace("shiny", quietly = TRUE)) {
stop("Package Shiny needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("shinythemes", quietly = TRUE)) {
stop("Pacakage shinythemes needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("DT", quietly = TRUE)) {
stop("Pacakage DT needed for this function to work. Please install it.",
call. = FALSE)
}
appDir <- system.file("shiny", package = "weco")
if (appDir == "") {
stop("Could not find Shiny directory. Try re-installing `weco`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal");
}
##------------------------------------------------------------------------
##   PLOT
##-------------------------------------------------------------------------
get.point.col <- function(weco.rst, runin=0) {
if (is.null(weco.rst))
return(NULL);
stopifnot("weco" == class(weco.rst));
##default
samples <- weco.rst$x;
cols    <- rep("black", length(samples));
##runin
if (runin > 0)
cols[1:runin] <- "gray";
##weco
cols[1 == weco.rst$weco] <- "red";
##return
cols
}
#' Plot WECO results
#'
#' Generate plot with the observed data with abnormalities identified
#'
#' @param x A class \code{weco} vector returned from
#'     \code{\link{weco.rule}} or \code{\link{weco.combine}}
#' @param ... The function takes the following arguments
#'            \describe{
#' \item{start}{First point for plotting}
#' \item{end}{Last point for plotting}
#' \item{selected}{Index of data points that will be highlighted}
#' \item{runin}{Number of running points that will be colored differently}
#' \item{ref}{Boolean. If true, reference lines will be given at 1, 2 and 3
#'     times standard deviation}
#' \item{ylim}{Range of Y-axis}
#' \item{cols}{Color of each data point}
#' }
#'
#' @seealso \code{\link{weco.rule}}, \code{\link{weco.combine}}
#'
#' @examples
#'
#' x        <- rnorm(1000);
#' rst.comb <- weco.combine(x, lst.rules=list(list(1), list(2, k=9)));
#' plot(rst.comb, start=10, end=80, selected = c(60,70));
#'
#' @export
#'
plot.weco <- function(x, ...) {
weco.rst <- x;
if (is.null(weco.rst))
return(NULL);
stopifnot("weco" == class(weco.rst));
args <- list(...);
start <- args$start;
if (is.null(start)) {
start <- 1;
}
end <- args$end;
if (is.null(end)) {
end <- length(weco.rst$x);
}
runin <- args$runin;
if (is.null(runin)) {
runin <- 0;
}
ref <- args$ref;
if (is.null(ref)) {
ref <- TRUE;
}
selected <- args$selected;
ylim     <- args$ylim;
cols     <- args$cols;
sample <- weco.rst$x;
mu     <- weco.rst$mux;
sigma  <- weco.rst$sdx;
if (is.null(ylim)) {
min.y <- min(sample);
max.y <- max(sample);
my.l  <- min.y - 0.05*(max.y-min.y);
my.u  <- max.y + 0.05*(max.y-min.y);
my.half <- max(mu - my.l, my.u - mu);
ylim  <- c(mu - my.half, mu + my.half);
}
if (is.null(cols))
cols <- get.point.col(weco.rst, runin);
##all points in start:end
xx <- start:end;
plot(xx,
sample[xx],
xlim=c(start-1, end+1),
ylim=ylim,
type="b",
xaxs="i",
col=cols[xx], xlab="", ylab="samples");
##selected
if (length(selected) > 0) {
for (j in 1:length(selected)) {
xx <- selected[j];
if (xx > runin) {
points(xx, sample[xx], col=cols[xx], cex=1.5);
lines(c(xx, xx), ylim, lty=2, col=cols[xx]);
}
}
}
##refrence lines
if (ref) {
for (i in -3:3) {
lines(c(start-1, end+1), c(mu+i*sigma, mu+i*sigma), lty=2, col="gray");
}
}
}
#' Summary of WECO outcome
#'
#' Print summary of a class \code{weco} object
#'
#' @param object A class \code{weco} object returned from
#'     \code{\link{weco.rule}} or \code{\link{weco.combine}}
#' @param ... Other arguments for \code{summary}
#' @examples
#' x        <- rnorm(1000);
#' rst.comb <- weco.combine(x, lst.rules=list(list(1), list(2, k=9)));
#' summary(rst.comb);
#'
#' @export
#'
summary.weco <- function(object, ...) {
cat("The data contains ", length(object$x), " data points.\n\n", sep="");
cat("The stable process is assumed to be normal with \n    mean: ", object$mux,
"\n    standard deviation: ", object$sdx, ".\n\nThe following rules are applied to find abnormalities:\n",
sep="");
for (i in 1:length(object$rule)) {
cat("Rule ", object$rule[i], ":\n", sep="");
cur.info <- do.call(weco.info, c(rule=object$rule[i],
object$pars[[i]],
prt=FALSE));
cat("  ", cur.info$description, ".\n", sep="");
}
cat("\nThere are in total ", sum(object$weco), " points found that were abnormal.\n", sep="");
}
plot.weco(spcTimeSeries)
require(weco);
set.seed(10000);
n.sim     <- 50000;
sdx       <- 2;
simu.data <- rnorm(n.sim, sd = sdx);
quants    <- c(0.25, 0.5, 0.75);
xmax      <- 3000;
ymax      <- 0.015;
l          <- 3;
rst.1      <- weco.rule(rule=1, x=simu.data, l=l, sdx=sdx, mux=0);
simu.arl   <- weco.rl(rst.1);
hist(simu.arl, breaks = 100, freq = F,
xlim=c(0, xmax), ylim=c(0,ymax),
xlab="Running Length", ylab="Probability", main="Rule 1");
plot.weco(rst.1)
## imagine this was *supposed* to be a zero-mean, normally-distributed
## process, but it's drifting....
len <- 80
zz <- ts(rnorm(len)+exp(2/(len:1)))
zz.s <- sd(zz)
plot(zz,ylim=c(-4*zz.s,4*zz.s),type="l")
abline(h=0)
abline(h=-3*zz.s,col="red")
abline(h=3*zz.s,col="red")
abline(h=2*zz.s,col="red",lty=2)
abline(h=-2*zz.s,col="red",lty=2)
abline(h=zz.s,col="red",lty=3)
abline(h=-zz.s,col="red",lty=3)
## Western Electric rule 1
## 2 consecutive points fall outside 2 sd limits
zz.rule1 <- abs(zz) > 2*zz.s
zz.rule1.rle <- rle(as.vector(zz.rule1))
zz.rule1.warn <- which(zz.rule1.rle$lengths >= 2
& zz.rule1.rle$values == TRUE)
## Western Electric rule 2
## 4 consecutive points fall beyond 1 sd limits
zz.rule2 <- abs(zz) > zz.s
zz.rule2.rle <- rle(as.vector(zz.rule2))
zz.rule2.warn <- which(zz.rule2.rle$lengths >= 4
& zz.rule2.rle$values == TRUE)
## Western Electric rule 3
## 8 consecutive points fall on one side of the centerline
zz.rule3 <- zz > 0
zz.rule3.rle <- rle(as.vector(zz.rule3))
zz.rule3.warn <- which(zz.rule3.rle$lengths >= 8)
## now colour the graph in to show where it's going wrong.
## using rule1 = red, rule2 = orange, rule3 = blue
##
## this is tedious enough that i'd brew up a function
## that takes the rle object, and the warning indicies
## and plots the right points
plot.warn.x <- function(tsobj, rleobj, ind, col,...) {
if(length(ind) <= 0) return()
## got here, there must be something interesting
##
## need to convert lengths back to indicies
ind.x <- c(1,cumsum(rleobj$lengths)+1)
for(i in seq(along=ind)) {
x.coords <- ind.x[ind[i]]:(ind.x[ind[i]+1]-1)
lines(x.coords + start(tsobj)[1]-1,tsobj[x.coords],col=col,...)
rug(x.coords + start(tsobj)[1],col=col,...)
}
}
plot.warn.x(zz, zz.rule3.rle, zz.rule3.warn, "blue")
plot.warn.x(zz, zz.rule2.rle, zz.rule2.warn, "orange")
plot.warn.x(zz, zz.rule1.rle, zz.rule1.warn, "red")
Aw <- round(rnorm(240, mean = 6, sd = 1.33))
date = (seq(as.Date('2014-1-1'),
length.out = 240,
by = 'day'))
d <- data.frame(date,
Aw)
week <- as.Date(cut(date, 'week'))            # Subgrouping vector
d <- data.frame(date, y, week)          # Data frame
qic(Aw, x=date, chart = 'i')
ggplotly(tcc(Aw, x=date, chart = 'i'))
Aw <- round(rnorm(240, mean = 6, sd = 1.33))
date = (seq(as.Date('2014-1-1'),
length.out = 240,
by = 'day'))
d <- data.frame(date,
Aw)
week <- as.Date(cut(date, 'week'))            # Subgrouping vector
d <- data.frame(date,
Aw)
qic(Aw, x=date, chart = 'i')
ggplotly(tcc(Aw, x=date, chart = 'i'))
Aw <- round(rnorm(240, mean = 6, sd = 0.66))
date = (seq(as.Date('2014-1-1'),
length.out = 240,
by = 'day'))
d <- data.frame(date,
Aw)
qic(Aw, x=date, chart = 'i')
ggplotly(tcc(Aw, x=date, chart = 'i'))
Aw <- round(rnorm(240, mean = 6, sd = 1.2))
date = (seq(as.Date('2014-1-1'),
length.out = 240,
by = 'day'))
d <- data.frame(date,
Aw)
qic(Aw, x=date, chart = 'i')
ggplotly(tcc(Aw, x=date, chart = 'i'))
library(qicharts)
set.seed(7)
y <- rnorm(24)
qic(y, chart = 'i')
tcc(y, chart = 'i')
y[18] <- 5
qic(y, chart = 'i')
tcc(y, chart = 'i')
y <- round(rnorm(24, mean = 3400, sd = 400))
y
qic(y,
chart = 'i',
main  = 'Birth weight (I chart)',
ylab  = 'Grams',
xlab  = 'Baby no.')
tcc(y,
chart = 'i',
main  = 'Birth weight (I chart)',
ylab  = 'Grams',
xlab  = 'Baby no.')
qic(y,
chart = 'mr',
main  = 'Pairwise differences in birth weights (MR chart)',
ylab  = 'Grams',
xlab  = 'Baby no.')
tcc(y,
chart = 'mr',
main  = 'Pairwise differences in birth weights (MR chart)',
ylab  = 'Grams',
xlab  = 'Baby no.')
m.beds       <- 300
m.stay       <- 4
m.days       <- m.beds * 7
m.discharges <- m.days / m.stay
p.pu         <- 0.08
discharges  <- rpois(24, lambda = m.discharges)
patientdays <- round(rnorm(24, mean = m.days, sd = 100))
n.pu        <- rpois(24, lambda = m.discharges * p.pu * 1.5)
n.pat.pu    <- rbinom(24, size = discharges, prob = p.pu)
week        <- seq(as.Date('2014-1-1'),
length.out = 24,
by         = 'week')
d <- data.frame(week, discharges, patientdays,n.pu, n.pat.pu)
d
d <- data.frame(n.pat.pu, discharges, week)
d
qic(n.pat.pu,
n            = discharges,
x            = week,
data         = d,
chart        = 'p',
standardised = TRUE,
main         = 'Patients with hospital acquired pressure ulcers (Standardised P chart)',
ylab         = 'Standard deviations',
xlab         = 'Week')
tcc(n.pat.pu,
n            = discharges,
x            = week,
data         = d,
chart        = 'p',
standardised = TRUE,
main         = 'Patients with hospital acquired pressure ulcers (Standardised P chart)',
ylab         = 'Standard deviations',
xlab         = 'Week')
tcc(rnorm(24))
d <- data.frame(x = rep(1:24),
day = (seq(as.Date('2014-1-1'),
length.out = 24,
by = 'day')),
n = rbinom(24, 100, 0.5),
d = round(runif(24, 90, 110))
)
tcc(n, d, day, data = d, chart = 'i')
tcc(n, d, mo, g1 = g1, g2 = g2, data = d)
tcc(n, d, mo, g1 = g1, g2 = g2, data = d, chart = 'p')
tcc(n, d, day, g1 = g1, g2 = g2, data = d)
d <- data.frame(x = rep(1:24, 4),
mo = (rep(seq(as.Date('2014-1-1'),
length.out = 24,
by = 'day'),
4)),
n = rbinom(4 * 24, 100, 0.5),
d = round(runif(4 * 24, 90, 110)),
g1 = rep(c('a', 'b'), each = 48),
g2 = rep(c('A', 'B'), each = 24))
tcc(n, d, mo, g1 = g1, g2 = g2, data = d)
tcc(n, d, mo, data = d, chart = 'i')
tcc(n, d, mo, g1 = g1, g2 = g2, data = d, chart = 'p')
tcc(n, d, mo, g1 = g1, g2 = g2, data = d, chart = 'p', freeze = 12)
tcc(n, d, mo, g1 = g1, g2 = g2, data = d, chart = 'p',
breaks = c(12, 18), print.summary = TRUE)
data(pistonrings)
library("qcc", lib.loc="~/Shared/shiny/R/x86_64-pc-linux-gnu-library/3.3")
data(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
q <- ewma(diameter[1:25,], lambda=0.2, nsigmas=3)
summary(q)
q <-  ewma(diameter[1:25,], lambda=0.2, nsigmas=2.7, newdata=diameter[26:40,], plot = FALSE)
summary(q)
plot(q)
x <- c(33.75, 33.05, 34, 33.81, 33.46, 34.02, 33.68, 33.27, 33.49, 33.20,
33.62, 33.00, 33.54, 33.12, 33.84) # viscosity data (Montgomery, pag. 242)
q <-  ewma(x, lambda=0.2, nsigmas=2.7)
summary(q)
library(qcc)
data(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
q <- cusum(diameter[1:25,], decision.interval = 4, se.shift = 1)
---
title: "Quality Control with R: Intuitive Example"
source("checksheet_data.R")
data_checkSheet <- rbind(
data.frame(Group = "Manpower",
Cause = cManpower),
data.frame(Group = "Machines",
Cause = cMachines),
data.frame(Group = "Materials",
Cause = cMaterials),
data.frame(Group = "Methods",
Cause = cMethods),
data.frame(Group = "Measurements",
Cause = cMeasurements)
)
cause.and.effect(
cause = list(Manpower = cManpower,
Materials = cMaterials,
Machines = cMachines,
Methods = cMethods,
Measurements = cMeasurements),
effect = cEffect)
cManpower <- c("Recepcionist", "Record. Operator",
"Storage operators")
cMaterials <- c("Supplier", "Transport agency",
"Packing")
cMachines <- c("Compressor type",
"Operation conditions",
"Machine adjustment")
cMethods <- c("Reception", "Transport method")
cMeasurements <- c("Recording method",
"Measurement appraisal")
cGroups <- c("Manpower", "Materials", "Machines",
"Methods", "Measurements")
cause.and.effect(
cause = list(Manpower = cManpower,
Materials = cMaterials,
Machines = cMachines,
Methods = cMethods,
Measurements = cMeasurements),
effect = cEffect)
cManpower <- c("Recepcionist", "Record. Operator",
"Storage operators")
cMaterials <- c("Supplier", "Transport agency",
"Packing")
cMachines <- c("Compressor type",
"Operation conditions",
"Machine adjustment")
cMethods <- c("Reception", "Transport method")
cMeasurements <- c("Recording method",
"Measurement appraisal")
cGroups <- c("Manpower", "Materials", "Machines",
"Methods", "Measurements")
cEffect <- "Too high density"
cause.and.effect(
cause = list(Manpower = cManpower,
Materials = cMaterials,
Machines = cMachines,
Methods = cMethods,
Measurements = cMeasurements),
effect = cEffect)
data_checkSheet <- rbind(
data.frame(Group = "Manpower",
Cause = cManpower),
data.frame(Group = "Machines",
Cause = cMachines),
data.frame(Group = "Materials",
Cause = cMaterials),
data.frame(Group = "Methods",
Cause = cMethods),
data.frame(Group = "Measurements",
Cause = cMeasurements)
)
library(xtable)
print(xtable(data_checkSheet), type = "HTML",
html.table.attributes =
"border=1 width=100% cellpadding=10")
